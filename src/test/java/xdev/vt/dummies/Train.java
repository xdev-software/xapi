/*
 * XDEV Application Framework - XDEV Application Framework
 * Copyright © 2003 XDEV Software (https://xdev.software)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package xdev.vt.dummies;

import java.util.Locale;

import org.junit.Ignore;

import xdev.db.DBException;
import xdev.db.DataType;
import xdev.lang.StaticInstanceSupport;
import xdev.ui.text.TextFormat;
import xdev.vt.VirtualTable;
import xdev.vt.VirtualTableColumn;

@Ignore
public class Train
extends VirtualTable implements StaticInstanceSupport //аз{GENERATED-CODE-LINE:VT_SUPERCLASS}
{
	
	/**
	  * The testdata wich is filled in the VT
	  * <p>
	  * <b>Note:</b>The count of each array has to be the same
	  * </p>
	*/
	
	
	private static Object[] hp = {100,80,60,200,400,320};
	private static Object[] kw = {170, 150, 120, 370, 333, 444};
	private static Object[] company = {"German Train","Italian Train Company", "American Railroad", "New York Subway", "French Railroad", "Russian Train"};
	private static Object[] expense = {16555.3,155555.99,14.99999,5.11199,2229.99,197719.99};
	private static Object[] description = {"ICE","subway", "freighttrain", "common train", "express train", "magnetic levitation train"};
	private static Object[] color = {"brown","blue", "grey", "black", "red", "yellow"};
	private static Object[] manufacturerCountry = {"USA","GER", "POL", "IT", "EN", "RUS"};
	private static Object[] weigth = {200000,100000, 2000, 30000, 50000, 60000};
	private static Object[] trainNumber = {123,234, 342, 245, 743, 977};
	private static Object[] maxPeople = {1233,942, 342, 1245, 743, 977};
	/**
	  * The autogenerated code wich contains the creation of the VT columms
	*/
	
	// Generated code, do not edit!аз{GENERATED-CODE-BLOCK-START:VIRTUAL_TABLE}
	public final static VirtualTableColumn<Integer> id;
	public final static VirtualTableColumn<Integer> HP;
	public final static VirtualTableColumn<Integer> KW;
	public final static VirtualTableColumn<String> Color;
	public final static VirtualTableColumn<Double> Expense;
	public final static VirtualTableColumn<String> Description;
	public final static VirtualTableColumn<Double> Weight;
	public final static VirtualTableColumn<String> ManufactureCountry;
	public final static VirtualTableColumn<String> Company;
	public final static VirtualTableColumn<Integer> Trainnumber;
	public final static VirtualTableColumn<Double> MaxPeople;
	
	
	static
	{
		id = new VirtualTableColumn<Integer>("id");
		id.setType(DataType.INTEGER);
		id.setAutoIncrement(true);
		id.setDefaultValue(null);
		id.setPreferredWidth(100);
		id.setTextFormat(TextFormat.getPlainInstance());
		
		HP = new VirtualTableColumn<Integer>("HP");
		HP.setType(DataType.INTEGER);
		HP.setDefaultValue(null);
		HP.setPreferredWidth(100);
		HP.setTextFormat(TextFormat.getNumberInstance(Locale.getDefault(),null,2,2,true,false));
		
		KW = new VirtualTableColumn<Integer>("KW");
		KW.setType(DataType.INTEGER);
		KW.setDefaultValue(null);
		KW.setPreferredWidth(100);
		KW.setTextFormat(TextFormat.getNumberInstance(Locale.getDefault(),null,2,2,true,false));
		
		Color = new VirtualTableColumn<String>("Color");
		Color.setType(DataType.VARCHAR,50);
		Color.setDefaultValue("");
		Color.setPreferredWidth(100);
		Color.setTextFormat(TextFormat.getPlainInstance());
		
		Expense = new VirtualTableColumn<Double>("Expense");
		Expense.setType(DataType.DOUBLE);
		Expense.setDefaultValue(null);
		Expense.setPreferredWidth(100);
		Expense.setTextFormat(TextFormat.getNumberInstance(Locale.getDefault(),null,2,2,true,false));
		
		Description = new VirtualTableColumn<String>("Description");
		Description.setType(DataType.VARCHAR,50);
		Description.setDefaultValue("");
		Description.setPreferredWidth(100);
		Description.setTextFormat(TextFormat.getPlainInstance());
		
		Weight = new VirtualTableColumn<Double>("Weight");
		Weight.setType(DataType.DOUBLE);
		Weight.setDefaultValue(null);
		Weight.setPreferredWidth(100);
		Weight.setTextFormat(TextFormat.getNumberInstance(Locale.getDefault(),null,2,2,true,false));
		
		ManufactureCountry = new VirtualTableColumn<String>("ManufactureCountry");
		ManufactureCountry.setType(DataType.VARCHAR,50);
		ManufactureCountry.setDefaultValue("");
		ManufactureCountry.setPreferredWidth(100);
		ManufactureCountry.setTextFormat(TextFormat.getPlainInstance());
		
		Company = new VirtualTableColumn<String>("Company");
		Company.setType(DataType.VARCHAR,50);
		Company.setDefaultValue("");
		Company.setPreferredWidth(100);
		Company.setTextFormat(TextFormat.getPlainInstance());
		
		Trainnumber = new VirtualTableColumn<Integer>("Trainnumber");
		Trainnumber.setType(DataType.INTEGER);
		Trainnumber.setDefaultValue(null);
		Trainnumber.setPreferredWidth(100);
		Trainnumber.setTextFormat(TextFormat.getPlainInstance());
		
		MaxPeople = new VirtualTableColumn<Double>("MaxPeople");
		MaxPeople.setType(DataType.DOUBLE);
		MaxPeople.setDefaultValue(null);
		MaxPeople.setPreferredWidth(100);
		MaxPeople.setTextFormat(TextFormat.getNumberInstance(Locale.getDefault(),null,2,2,true,false));
	}
	
	
	public Train()
	{
		super(Train.class.getName(),"Train",id,HP,KW,Color,Expense,Description,Weight,ManufactureCountry,Company,Trainnumber,MaxPeople);
	
		setPrimaryColumn(id);
	
	}
	
	
	public final static Train VT = new Train();
	
	
	public static Train getInstance()
	{
		return VT;
	}
	// End generated codeаз{GENERATED-CODE-BLOCK-END:VIRTUAL_TABLE}

	/**
	  * Creates as much rows as the value of the given parameter, filled with example data 
	  *  
	  * @param rowcount
	  *
	  */

	public void VtFill(int rows)
	{
	
		
		int e = 0;
		int f = 0;
		int d = 0;
		
		
		for(int i = 0; i< rows; i++)
		{
	
				if(e<hp.length)
				{
					Object[] in = {hp[f],kw[e],color[d]
					, expense[f], description[e], weigth[f]
					, manufacturerCountry[f], company[f],trainNumber[f], maxPeople[f]};
					
					try
					{
						this.addRow(false, in );
						
					}
					catch(DBException ex)
					{
						ex.printStackTrace();
					}
					
					
					if(f<hp.length-1)
					f++;
					else
					{
						f= 0;
						if(d<hp.length-1)
						{
							d++;
						}
						
						else
						{
							d= 0;
							e++;
						}
						
						
					}
				}
				
				else
				{
					e = 0;
					f= 0;
					d= 0;
					
					
				}
			
			
		}
	}
	

public final static void main(String args[])
{
	final  Train vt	= new Train();
	
	//param = number of wished rows
	vt.VtFill(90);
	
	
}


}
