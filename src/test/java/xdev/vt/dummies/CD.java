
package xdev.vt.dummies;

/*-
 * #%L
 * XDEV Application Framework
 * %%
 * Copyright (C) 2003 - 2020 XDEV Software
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Lesser Public License for more details.
 * 
 * You should have received a copy of the GNU General Lesser Public
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/lgpl-3.0.html>.
 * #L%
 */


import java.sql.Date;
import java.text.DateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Locale;
import java.util.Random;

import org.junit.Ignore;

import xdev.db.DBException;
import xdev.db.DataType;
import xdev.lang.StaticInstanceSupport;
import xdev.ui.text.TextFormat;
import xdev.vt.VirtualTable;
import xdev.vt.VirtualTableColumn;
import xdev.vt.VirtualTableException;


@Ignore
@SuppressWarnings("deprecation")
public class CD extends VirtualTable implements StaticInstanceSupport // аз{GENERATED-CODE-LINE:VT_SUPERCLASS}
{
	
	/**
	 * The exampledata wich is filled in the VT
	 * <p>
	 * <b>Note:</b>The indexcount of each array has to be the samek
	 * </p>
	 */
	
	private static Object[]									titleCount				= {10,12,16,18,
			3,20																	};
	private static Object[]									artist					= {
			"Alice Cooper","various artists","Will Smith","Metalica","Tenacious D","Queen"};
	private static Object[]									company					= {"Sony",
			" EMG","recordCompany SouthCoast","recordCompany NorthCoast","recordCompany EastCoast",
			"recordCompany WestCoast"												};
	private static Object[]									expenses				= {16.3,15.99,
			14.99,5.99,29.99,19.99													};
	private static Object[]									genre					= {"Hip Hop",
			"Metal","Rock","Rap","Pop","Hardrock"									};
	private static Object[]									coverColor				= {"brown",
			"blue","grey","black","red","yellow"									};
	private static Object[]									shortDescription		= {
			"Scrubs Serialsoundtrack","Rocker","Will Smith Sountracks","Metal pure","Jack Black",
			"Blue"																	};
	private static Object[]									coverPath				= {
			"C:\\Pictures","C:\\CoverPicutures","C:\\Cover","C:\\CoverPics","C:\\Cover_Pictures",
			"C:\\PictureCover"														};
	private static Object[]									date					= {
			new Date(100,5,11),new Date(50,5,3),new Date(40,3,10),new Date(50,2,4),
			new Date(150,2,6),new Date(100,3,4)										};
	private static Object[]									interpreterRealprename	= {"George",
			"Will","Sarah","Jessica","Christina","Michael"							};
	
	/**
	 * The autogenerated code wich contains the creation of the VT columns
	 */
	
	// Generated code, do not edit!аз{GENERATED-CODE-BLOCK-START:VIRTUAL_TABLE}
	public final static VirtualTableColumn<Integer>			id;
	public final static VirtualTableColumn<Integer>			TitleCount;
	public final static VirtualTableColumn<String>			Artist;
	public final static VirtualTableColumn<String>			Genre;
	public final static VirtualTableColumn<String>			Company;
	public final static VirtualTableColumn<Double>			Expense;
	public final static VirtualTableColumn<String>			ShortDescription;
	public final static VirtualTableColumn<String>			CoverPath;
	public final static VirtualTableColumn<String>			CoverColor;
	public final static VirtualTableColumn<java.util.Date>	ReleaseDate;
	public final static VirtualTableColumn<String>			InterpreterRealprename;
	
	static
	{
		id = new VirtualTableColumn<Integer>("id");
		id.setType(DataType.INTEGER);
		id.setAutoIncrement(false);
		id.setDefaultValue(null);
		id.setPreferredWidth(100);
		id.setTextFormat(TextFormat.getPlainInstance());
		
		TitleCount = new VirtualTableColumn<Integer>("TitleCount");
		TitleCount.setType(DataType.INTEGER);
		TitleCount.setDefaultValue(null);
		TitleCount.setPreferredWidth(100);
		TitleCount.setTextFormat(TextFormat.getNumberInstance(Locale.getDefault(),null,2,2,true,
				false));
		
		Artist = new VirtualTableColumn<String>("Artist");
		Artist.setType(DataType.VARCHAR,50);
		Artist.setDefaultValue("");
		Artist.setPreferredWidth(100);
		Artist.setTextFormat(TextFormat.getPlainInstance());
		
		Genre = new VirtualTableColumn<String>("Genre");
		Genre.setType(DataType.VARCHAR,50);
		Genre.setDefaultValue("");
		Genre.setPreferredWidth(100);
		Genre.setTextFormat(TextFormat.getPlainInstance());
		
		Company = new VirtualTableColumn<String>("Company");
		Company.setType(DataType.VARCHAR,50);
		Company.setDefaultValue("");
		Company.setPreferredWidth(100);
		Company.setTextFormat(TextFormat.getPlainInstance());
		
		Expense = new VirtualTableColumn<Double>("Expense");
		Expense.setType(DataType.DOUBLE);
		Expense.setDefaultValue(null);
		Expense.setPreferredWidth(100);
		Expense.setTextFormat(TextFormat.getNumberInstance(Locale.getDefault(),null,2,2,true,false));
		
		ShortDescription = new VirtualTableColumn<String>("ShortDescription");
		ShortDescription.setType(DataType.VARCHAR,100);
		ShortDescription.setDefaultValue("");
		ShortDescription.setPreferredWidth(100);
		ShortDescription.setTextFormat(TextFormat.getPlainInstance());
		
		CoverPath = new VirtualTableColumn<String>("CoverPath");
		CoverPath.setType(DataType.VARCHAR,100);
		CoverPath.setDefaultValue("");
		CoverPath.setPreferredWidth(100);
		CoverPath.setTextFormat(TextFormat.getPlainInstance());
		
		CoverColor = new VirtualTableColumn<String>("CoverColor");
		CoverColor.setType(DataType.VARCHAR,50);
		CoverColor.setDefaultValue("");
		CoverColor.setPreferredWidth(100);
		CoverColor.setTextFormat(TextFormat.getPlainInstance());
		
		ReleaseDate = new VirtualTableColumn<java.util.Date>("ReleaseDate");
		ReleaseDate.setType(DataType.DATE);
		ReleaseDate.setDefaultValue(null);
		ReleaseDate.setPreferredWidth(100);
		ReleaseDate.setTextFormat(TextFormat.getDateInstance(Locale.getDefault(),null,
				TextFormat.USE_DATE_ONLY,DateFormat.MEDIUM,DateFormat.MEDIUM));
		
		InterpreterRealprename = new VirtualTableColumn<String>("InterpreterRealprename");
		InterpreterRealprename.setType(DataType.VARCHAR,50);
		InterpreterRealprename.setDefaultValue("");
		InterpreterRealprename.setPreferredWidth(100);
		InterpreterRealprename.setTextFormat(TextFormat.getPlainInstance());
	}
	

	public CD()
	{
		super(CD.class.getName(),"CD",id,TitleCount,Artist,Genre,Company,Expense,ShortDescription,
				CoverPath,CoverColor,ReleaseDate,InterpreterRealprename);
		
		this.setPrimaryColumn(id);
		
	}
	
	public final static CD	VT	= new CD();
	

	public static CD getInstance()
	{
		return VT;
	}
	

	// End generated codeаз{GENERATED-CODE-BLOCK-END:VIRTUAL_TABLE}
	
	
	public void vtFillRandom(int rows)
	{
		
		Random rand = new Random();
		try
		{
			for (int r=1; r<rows+1; r++) {
				List<Object> values = new ArrayList<Object>();

				values.add(r);
				values.add(titleCount[rand.nextInt(titleCount.length)]);
				values.add(artist[rand.nextInt(artist.length)]);
				values.add(genre[rand.nextInt(genre.length)]);
				values.add(company[rand.nextInt(company.length)]);
				values.add(expenses[rand.nextInt(expenses.length)]);
				values.add(shortDescription[rand.nextInt(shortDescription.length)]);
				values.add(coverPath[rand.nextInt(coverPath.length)]);
				values.add(coverColor[rand.nextInt(coverColor.length)]);
				values.add(date[rand.nextInt(date.length)]);
				values.add(interpreterRealprename[rand.nextInt(interpreterRealprename.length)]);
				
				
				this.addRow(values, false);
			}
		}
		catch(VirtualTableException e)
		{
			e.printStackTrace();
		}
		catch(DBException e)
		{
			e.printStackTrace();
		}
	}
	
	
	/**
	 * Creates as much rows as the value of the given parameter, filled with
	 * example data
	 * 
	 * @param rowcount
	 * 
	 */
	public void vtFill(int rows)
	{
		
		int e = 0;
		int f = 0;
		int d = 0;
		
		List<Integer> ids = this.getColumnData(this.getColumnIndex("id"));
		
		final int maxId;
		
		if(ids.isEmpty())
		{
			maxId = 0;
		}
		
		else
		{
			maxId = Collections.max(ids);
		}
		
		for(int i = 0; i < rows; i++)
		{
			
			if(e < company.length)
			{
				Object[] in = {maxId + i + 1,titleCount[f],artist[e],genre[d],company[f],
						expenses[f],shortDescription[f],coverPath[f],coverColor[f],date[f],
						interpreterRealprename[f]};
				
				try
				{
					this.addRow(false,in);
					
				}
				catch(DBException ex)
				{
					ex.printStackTrace();
				}
				
				if(f < company.length - 1)
					f++;
				else
				{
					f = 0;
					if(d < company.length - 1)
					{
						d++;
					}
					
					else
					{
						d = 0;
						e++;
					}
					
				}
			}
			
			else
			{
				e = 0;
				f = 0;
				d = 0;
				
			}
			
		}
	}
	

	public final static void main(String args[])
	{
		
		final CD vt = new CD();
		
		// param = number of wished rows
		//vt.vtFill(90);
		vt.vtFillRandom(90);
		
	}
}
